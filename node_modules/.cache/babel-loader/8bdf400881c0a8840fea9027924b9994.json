{"ast":null,"code":"var _jsxFileName = \"/Users/elbrus/Desktop/Tests/chesstery-test/app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { startAllPokemons } from \"./components/redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    pokemons,\n    isError,\n    isLoading\n  } = useSelector(state => state.mainPage);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isError ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"An error occured, sorry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(App, \"cPcYcTPDwY6P4nkLIUynKjWr1iE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/elbrus/Desktop/Tests/chesstery-test/app/src/App.js"],"names":["useDispatch","useSelector","startAllPokemons","App","dispatch","pokemons","isError","isLoading","state","mainPage"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,gBAAT,QAAiC,4BAAjC;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAAmCN,WAAW,CACjDO,KAAD,IAAWA,KAAK,CAACC,QADiC,CAApD;AAGA,sBACE;AAAA,cACGH,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,GAEJC,SAAS,gBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADW,GAET;AALN,mBADF;AASD;;GAdQJ,G;UACUH,W,EACwBC,W;;;KAFlCE,G;AAgBT,eAAeA,GAAf","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\n\nimport { startAllPokemons } from \"./components/redux/actions\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { pokemons, isError, isLoading } = useSelector(\n    (state) => state.mainPage\n  );\n  return (\n    <>\n      {isError ? (\n        <h2>An error occured, sorry</h2>\n      ) : isLoading ? (\n        <p>Loading</p>\n      ) : null}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}